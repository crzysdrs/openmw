// $Id: scanner.h 17 2007-08-19 18:51:39Z tb $

#ifndef EXAMPLE_SCANNER_H
#define EXAMPLE_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    Compiler::NewParser::token_type				\
    Compiler::NewScanner::lex(				\
	Compiler::NewParser::semantic_type* yylval,		\
	Compiler::NewParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer ExampleFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "newparser.hpp"

namespace Compiler {

    /** Scanner is a derived class to add some extra function to the scanner
     * class. Flex itself creates a class named yyFlexLexer, which is renamed using
     * macros to ExampleFlexLexer. However we change the context of the generated
     * yylex() function to be contained within the Scanner class. This is required
     * because the yylex() defined in ExampleFlexLexer has no parameters. */
    class NewScanner : public ExampleFlexLexer
    {
        bool mLegacy;
        bool mKeywordContext;
    public:
        /** Create a new scanner object. The streams arg_yyin and arg_yyout default
         * to cin and cout, but that assignment is only made when initializing in
         * yylex(). */
        NewScanner(std::istream & arg_yyin,
            std::ostream & arg_yyout);

        /** Required for virtual functions */
        virtual ~NewScanner();

        /** This is the main lexing function. It is generated by flex according to
         * the macro declaration YY_DECL above. The generated bison parser then
         * calls this virtual function to fetch new tokens. */
        virtual NewParser::token_type lex(
            NewParser::semantic_type* yylval,
            NewParser::location_type* yylloc
                                       );
        /* note that the use of this function mangles yytext */
        void unputstr(char * str, int len);

        /** Enable debug output (via arg_yyout) if compiled into the scanner. */
        void set_debug(bool b);

        void set_legacy(bool b);
        NewParser::token_type getKeywordToken(char * text, int len);

        void set_keyword_context(bool b);
    private:
        std::string * remove_quotes(char * text, int yyleng);
    };

} // namespace example

#endif // EXAMPLE_SCANNER_H
